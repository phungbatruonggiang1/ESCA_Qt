1. Thực hiện chức năng config audio
- Cho phép giao diện config các tham số -> có dữ liệu đầu vào -> cung cấp cho backend, đồng bộ hóa giữa RAM và file trong database
input device, oupt device, format audio (sample rate, resolution, codec, number of channels), duration, save file location, 


Chỉnh lại tên lớp: Chia lại hướng đối tượng giữa audioengine -> inputendine vad outputenigne trong class recording controller
xem xét việc dùng chung recordingio giữa input và output hay tách riêng
Thực hiện chức năng thu âm
Thực hiện chức năng ghi ra file
Thực hiện chức năng vẽ lên biểu đồ

Vẽ các class diagram trước khi thực hiện các bước tiếp theo để có được thiết kế đúng
Ghép 2 chức năng này lại (multithread hoặc tuần tự)
-- hải minh -- Nhớ chỉnh lại hướng đối tượng cho rõ ràng và hợp lí.


Công việc tiếp theo:
- Hải Minh: Chức năng gợi ý tham số thu âm và setup môi trường, chức năng đặt lịch thu thập âm thanh, chức năng cắt file nhỏ
- Giang: Class tiến trình + quản lí hoặc kill(suy diễn + hiển thị dữ liệu huấn luyện), daemons, nghiên cứu model-view: bảng hiển thị và webserver đẩy dữ liệu
dynamic table: các lần huấn luyện, kết quả + view + monitor; các nội dung khác, ...
chart: // Chưa nghĩ ra
daemon + yocto for jetson nano, jetson origin nano and rasberry pi 4




* Cho phép gợi ý các tham số thu âm cho người sử dụng; hoặc là người dùng tự đề xuất, nhưng phải kiểm tra điều kiện.
- Thực hiện khởi tạo audio trong các trường hợp nhất định


Xác định các truờng hợp thu âm -> khởi tạo kèm theo
suy diễn theo thời gian thực


- Chức năng hẹn giờ thu âm
2. Xây dựng hiển thị âm thanh, tương tác file: bật, tắt, xóa, lưu lên clouds, trích xuất các đặc trưng của âm thanh qua python


audio manipulation: audio features extration + split audio. Maybe lack of crawl data from server to extract function.
With spilit audio function, Hopefully, I would like to build 2 versions:
+ Version 1: Split the audio file by code python that the last term developed before
+ Version 2: Call a service in the OS to spilt file, maybe the service is developed by C++ and Qt. We can wait until the Yocto project for ESCA complete or we can test with this function. Split file is developed by Qt and run as a service on kernel. And the ESCA_Qt call a service through initctl emit signal. Remember build it to the dynamic for saving memory! 
!!! I will see you soon when showing the service of OS diagram.



3. Xây dựng module monitor hệ thống
- các tài nguyên trong hệ thống
- lịch sử bật máy, lịch sử thu âm, thống kê tần suất,
- lưu lượng, tài nguyên trên clouds
- các kết quả thu âm
- mức độ tiêu thụ tài nguyên khi thực hiện training, inference, thu âm, ... -> đẩy lên clouds các ảnh

Giao diện file manger
xóa file, xóa thư mục: rm -rf file_name
đẩy dử liệu lên cloud: python3 server.py
mount file: mount file://adress
play dữ liệu: tìm thư viện + code Qt



4. Xây dựng module huấn luyện dữ liệu

5. Xây dựng module suy diễn theo thời gian thực



6 [optional]: cho phép truyền thông, chia sẻ dữ liệu giữa các thiết bị biên hoặc trong mạng thu thập dữ liệu. Hiển thị mạng cảm biến và trạng thái mạng
7 [optional]: toàn diện quy trình điều khiển từ xa, giữa các edge.









// Next plan [update at August 31, 2024]
The recording: 
+ view chart needs to add the axis and make the theme beatifully
+ haven't carried out the saving file.wav

[!Important] There are numerous features for saving audio files
Users can recording with no set file duration, it means the file duration is from start recording to the stop recording (or shutdown machine)
Recording with set file duration before (2 seconds, 10 senconds, 1 munite, 10 munites, 1 hour, ..etc) -> it's easy to overload buffer, you can break down into 2 timer, one is for file duration and one is the time to write to file frequently, it can avoid overflow buffer in the long duration case. -> Please be careful to design this feature.
-> It's quite difficult to avoid overload buffer, but I can do it!



The config:
+ haven't combine the audio parameters with data in RAM and the persistence storage
+ need to make the theme beatifully
+ don't have the storage to save audio files in configure theme

-> Need to implement with memory saving strategy
+ suitable initilizing in back-end class
+ don't load or just load string path (image, file, ...) just in .qml file -> add onOpen() and onClose() 

Next:
File Manager: (Hai Minh)
+ Show file, and file manipulation: Remove, Play (need to add output audio), Sync and upload to clouds (I would like to develop this feature after November 2024)

System monitor:
+ System resource: RAM, CPU, Storage Capacity, Network, 
+ Ram with Qt process
+ RAM with training or transfer learning or inference

Result in Training pharse

Recording schedule with crond or timer in Qt

System + Yocto:
PoC the communication in multi-process in Linux: socket, D-bus, shared memory, ...
Build the inter-communication for ESCA between multi-process
Build Yocto image for Ubuntu
Summary the memory consumption for Qt process; AI and training process [in the past, now, in the future]



Process:
Master planining, Build a package: box, define the theme in figma, training -> inspire
Design the system: System architecture, Class diagram, communiction diagram, finite machine, state of features, sequence diagram, user manual.
Carry out the media related to marketing: on the website, logo, poster, slide to introduce.
Need to more purchase numerous course related to yocto project, Linux Embedded system (I would prefer to communication and memory saving courses) 



Next plan [Update at Sep 14, 2024] by truonggiangphung
1. UI/UX: Design in Figma: Clear the screens in Figma [Hai Minh + Nghia], Follow: Giang
2. Add code from old repo:
System monitor:
File Manager:
About:
...
3. Review code config audio + file factory + audio chart [giang]
4. Build Yocto [giang]
+ Yocto image base [success]
+ Yocto image with Qt [pending]
+ Yocto image with cuda and tensorflow [pending]
+ Yocto image with ESCA project
5. Media: make a webiste, content, ... [giang, hai minh, tuan - SPARC software team]
6. Pack eqipment into a box [double Duong]
Hopefully, I will expect the tasks can be done before October.


... -> Code + commit + Review + Verify -> ...

From October:
Develop the trasffer learning in Jetson Nano.
The image which built before will run tranffer learning at standalone mode
The image which built before will run tranffer learning with Qt and Yocto in Jetson Nano
--Preparation--
1. File system: Data + Code python + Libs + base training result
2. The parammeters for model to tranffer learning
3. Qt: Screens + Code backend C++ + 


Plans for new-comers.
+ Cross-compile Qt for Jetson Nano, Rasberry Pi 4, Rasberry Pi 3.
+ Complete the functions: 
file managers: can play, stop, delete. For now, concentrate in deleting the file. Play, stop will be implemeted after designing the audio output
show the results: it's a independence icon in the home screen about result. Results of training, results of monitor, other results - connect to mongoDB in data center to fectch data - Design the database 
system monitor: will be updated by Hai Minh Nguyen
+ Draw class diagrams and inter-communication between classes


Next plans for ESCA team
1. Design database (MySQL + NoSQL for ESCA) - Giang + N.Duong [expect to be done at the end of October]
+ Design database
+ Statistic the API: equipment management, audio management, result management
+ Implement web-service in data center: upload data, download data, get images or fetch API to get result, ... 
+ Using show result in Qt to fetch and display data - Hai
2. Design the screens [Figma + Qt Design Creator] - H.Minh + Nghia [done before this October, please break down numerous phases]
+ Phase 1: Home, reco rding module, result of training, system monitoring, audio manipulation + file manager
+ Phase 2: Prepare data, base training, transfer learning, inference
+ Phase 3: At the rest of functions
3. Output Audio - Giang + H.Minh
+ Play the audio file to speaker which connected to the target machine
4 Combine with audio manipulation + file manager + play the audio files + upload/download data + synchronization - T.Duong
5. System monitor: N.Duong, Nghia
Check the memory consumption, CPU, GPU performance, network connection, peripheral connection and show the machine info.
6. Build yocto: Giang
+ Yocto [standalone]
+ Yocto + cuda + tensorflow [not done yet]
+ yocto + Qt [not done yet]
+ yocto for ESCA -> create a repo [expect complete before November]
7. Run AI code in Jetson nano + Rasberry Pi - Hai Minh
+ Run code
+ list the input output for each function
+ communication between Qt and AI tasks via D-BUS and persistence file -> research more about inter-process communication
+ manage the processes by Qt -> research more QProcess


